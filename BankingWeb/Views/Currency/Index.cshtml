@using BankingDAL.Entities
@using BankingWeb.Controllers
@model IList<CurrencyRate>
@{
    ViewBag.Title = "Curenncies";

    var currencies = new List<String>();

    foreach (var rate in Model)
    {
        currencies.Add(rate.First.Currency.ShortName);
        currencies.Add(rate.Second.Currency.ShortName);
    }
    currencies = currencies.Distinct().ToList();
}
<h1>
    Currency rates</h1>
<div class="control-group">
    @if (User.IsInRole(BaseController.Administrator))
    {
        <a href="@Url.Action("Add", "Currency")">
            <button class="btn" id="add-client">
                Add currency
            </button>
        </a>
    }
</div>
<table class="table table-striped">
    <tr>
        <td>
            Curenncy
        </td>
        @foreach (var currency in currencies)
        {
            <td>
                @currency
            </td>
        }
    </tr>
    @foreach (var firstCurrency in currencies)
    {
        <tr>
            <td>
                @firstCurrency
            </td>
            @foreach (var secondCurrency in currencies)
            {
                <td>
                    @if (firstCurrency != secondCurrency)
                    {
                        var searchCurrencies = new[] { firstCurrency, secondCurrency };
                        var rates = Model.Where(rate => searchCurrencies.Contains(rate.First.Currency.ShortName) && searchCurrencies.Contains(rate.Second.Currency.ShortName));
                        var buy = rates.SingleOrDefault(rate => rate.Type == CurrencyRateType.Buy);
                        var sell = rates.SingleOrDefault(rate => rate.Type == CurrencyRateType.Sell);

                        if (buy != null && sell != null)
                        {
                            @String.Format("{0} / {1}", buy.First.Value / buy.Second.Value, sell.First.Value / sell.Second.Value)
                        }
                    }
                </td>
            }
        </tr>
    }
</table>
